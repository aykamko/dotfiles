###############################################################################
# Settings
###############################################################################
# Start numbering at 1
set -g base-index 1
set -g renumber-windows on

# Allows for faster key repetition
set -sg escape-time 0

# Too fast for tmux
set -sg repeat-time 0

# Focus events for vim
set -g focus-events on

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# history limit
set -g history-limit 50000

# extra environment variables to pass into new tmux sessions
set -ga update-environment ' VIRTUAL_ENV CONDA_DEFAULT_ENV RBENV_VERSION DOCKER_TLS_VERIFY DOCKER_HOST DOCKER_CERT_PATH DOCKER_MACHINE_NAME'

# Enable mouse in nested tmux
set mouse on
set -as terminal-overrides 'screen*:kmous=\E[M'

###############################################################################
# bindings
###############################################################################
# reload ~/.tmux.conf using prefix r
bind r source-file ~/.tmux.conf \; display "tmux conf reloaded!"

# smart pane switching with awareness of vim splits
# must install vim-tmux-navigator in vim
is_vim='echo "#{pane_current_command}" | egrep -iqe "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if "$is_vim" "send-keys c-h" "run \"tmux display-message -p '#D' > /tmp/tmux.last_pane\" \; select-pane -L \; if \"grep -Fxq $(tmux display-message -p '#D') /tmp/tmux.last_pane\" \"send-keys C-h\" \"\""
bind -n C-j if "$is_vim" "send-keys C-j" "run \"tmux display-message -p '#D' > /tmp/tmux.last_pane\" \; select-pane -D \; if \"grep -Fxq $(tmux display-message -p '#D') /tmp/tmux.last_pane\" \"send-keys C-j\" \"\""
bind -n C-k if "$is_vim" "send-keys C-k" "run \"tmux display-message -p '#D' > /tmp/tmux.last_pane\" \; select-pane -U \; if \"grep -Fxq $(tmux display-message -p '#D') /tmp/tmux.last_pane\" \"send-keys C-k\" \"\""
bind -n C-l if "$is_vim" "send-keys C-l" "run \"tmux display-message -p '#D' > /tmp/tmux.last_pane\" \; select-pane -R \; if \"grep -Fxq $(tmux display-message -p '#D') /tmp/tmux.last_pane\" \"send-keys C-l\" \"\""
bind -n C-Left  if "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-Down  if "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-Up    if "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-Right if "$is_vim" "send-keys C-l" "select-pane -R"

# split pane/window on current directory
bind -r c new-window -c "#{pane_current_path}"
bind -r h split-window -h -b -c "#{pane_current_path}"
bind -r l split-window -h -c "#{pane_current_path}"
bind -r k split-window -v -b -c "#{pane_current_path}"
bind -r j split-window -v -c "#{pane_current_path}"
bind -r j split-window -v -c "#{pane_current_path}"
bind -r % split-window -h -c "#{pane_current_path}"
bind -r '"' split-window -c "#{pane_current_path}"

# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# layouts
bind -r '\' select-layout even-horizontal
bind -r '-' select-layout even-vertical

# no confirmation on kill-pane or kill-window
# bind & kill-window
bind x if "$is_vim" "send-keys C-x" kill-pane # vim-tmux killpane
bind / run "kill -9 #{pane_pid}" # force-quit pane

# Vi copypaste mode
bind Escape copy-mode
setw -g mode-keys vi

setw -g automatic-rename on
set -g set-titles on

bind -r b break-pane
bind -r g break-pane -d

bind -r y if "[[ $(tmux show-options -v status) = 'on' ]]" "set status off" "set status on"

is_curses_like='(( #{alternate_on} )) || echo "#{pane_current_command}" | egrep -iqe "(less|man|vim)"'
bind -n C-u if "$is_curses_like" "send-keys C-u" "copy-mode -eu"
# bind -n Pageup if "$is_curses_like" "send-keys C-u" "copy-mode -eu"

# Remove SSH_AUTH_SOCK to disable tmux automatically resetting the variable
set -g update-environment "DISPLAY SSH_ASKPASS SSH_AGENT_PID \
                             SSH_CONNECTION WINDOWID XAUTHORITY"

# Use a symlink to look up SSH authentication
if-shell -b '[ -n $ET_VERSION ]' {
  setenv -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock
}
