###############################################################################
# Settings
###############################################################################
# Start numbering at 1
set -g base-index 1
set -g renumber-windows on

# Allows for faster key repetition
set -sg escape-time 0

# Too fast for tmux
set -sg repeat-time 0

# Focus events for vim
set -g focus-events on

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Use alacritty, otherwise xterm-256color
#if "[ -n \"$is_alacritty\" ]" "set -g default-terminal 'alacritty'" "set -g default-terminal 'xterm-256color'"
set -g default-terminal 'xterm-256color'

# history limit
set -g history-limit 50000

# extra environment variables to pass into new tmux sessions
set -ga update-environment ' VIRTUAL_ENV CONDA_DEFAULT_ENV RBENV_VERSION DOCKER_TLS_VERIFY DOCKER_HOST DOCKER_CERT_PATH DOCKER_MACHINE_NAME'

# change color of copy-mode
setw -g mode-style bg=colour237

###############################################################################
# bindings
###############################################################################
# reload ~/.tmux.conf using prefix r
bind r source-file ~/.tmux.conf \; display "tmux conf reloaded!"

set -g prefix c-space
unbind c-b
if "[ -n \"$SSH_CONNECTION\" ]" "set -g prefix2 c-b"

# smart pane switching with awareness of vim splits
# must install vim-tmux-navigator in vim
is_vim='echo "#{pane_current_command}" | egrep -iqe "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if "$is_vim" "send-keys c-h" "run \"tmux display-message -p '#D' > /tmp/tmux.last_pane\" \; select-pane -L \; if \"grep -Fxq $(tmux display-message -p '#D') /tmp/tmux.last_pane\" \"send-keys C-h\" \"\""
bind -n C-j if "$is_vim" "send-keys C-j" "run \"tmux display-message -p '#D' > /tmp/tmux.last_pane\" \; select-pane -D \; if \"grep -Fxq $(tmux display-message -p '#D') /tmp/tmux.last_pane\" \"send-keys C-j\" \"\""
bind -n C-k if "$is_vim" "send-keys C-k" "run \"tmux display-message -p '#D' > /tmp/tmux.last_pane\" \; select-pane -U \; if \"grep -Fxq $(tmux display-message -p '#D') /tmp/tmux.last_pane\" \"send-keys C-k\" \"\""
bind -n C-l if "$is_vim" "send-keys C-l" "run \"tmux display-message -p '#D' > /tmp/tmux.last_pane\" \; select-pane -R \; if \"grep -Fxq $(tmux display-message -p '#D') /tmp/tmux.last_pane\" \"send-keys C-l\" \"\""
bind -n C-Left  if "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-Down  if "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-Up    if "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-Right if "$is_vim" "send-keys C-l" "select-pane -R"

# split pane/window on current directory
bind -r c new-window -c "#{pane_current_path}"
bind -r h split-window -h -b -c "#{pane_current_path}"
bind -r l split-window -h -c "#{pane_current_path}"
bind -r k split-window -v -b -c "#{pane_current_path}"
bind -r j split-window -v -c "#{pane_current_path}"
bind -r j split-window -v -c "#{pane_current_path}"
bind -r % split-window -h -c "#{pane_current_path}"
bind -r '"' split-window -c "#{pane_current_path}"

# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# bind window hotkeys
# http://unix.stackexchange.com/a/96936
bind -n C-0 select-window -t :0
bind -n C-1 select-window -t :1
bind -n C-2 select-window -t :2
bind -n C-3 select-window -t :3
bind -n C-4 select-window -t :4
bind -n C-5 select-window -t :5
bind -n C-6 select-window -t :6
bind -n C-7 select-window -t :7
bind -n C-8 select-window -t :8
bind -n C-9 select-window -t :9
# NOTE: reserving the Alt-# hotkeys for vim tabs seems more useful at the moment
# nested tmux window hotkeys
# bind -n M-0 send-keys C-b \; send-keys 0
# bind -n M-0 send-keys C-b \; send-keys 0
# bind -n M-1 send-keys C-b \; send-keys 1
# bind -n M-2 send-keys C-b \; send-keys 2
# bind -n M-3 send-keys C-b \; send-keys 3
# bind -n M-4 send-keys C-b \; send-keys 4
# bind -n M-5 send-keys C-b \; send-keys 5
# bind -n M-6 send-keys C-b \; send-keys 6
# bind -n M-7 send-keys C-b \; send-keys 7
# bind -n M-8 send-keys C-b \; send-keys 8
# bind -n M-9 send-keys C-b \; send-keys 9

# layouts
bind -r '\' select-layout even-horizontal
bind -r '-' select-layout even-vertical

# no confirmation on kill-pane or kill-window
# bind & kill-window
bind x if "$is_vim" "send-keys C-x" kill-pane # vim-tmux killpane
bind / run "kill -9 #{pane_pid}" # force-quit pane

# Vi copypaste mode
bind Escape copy-mode
setw -g mode-keys vi
# copy highlighted text automatically
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

setw -g automatic-rename on
set -g set-titles on
set -g set-titles-string 'tmux #(whoami)@#(hostname --long 2>/dev/null || hostname)'

bind -r b break-pane
bind -r g break-pane -d

bind -r y if "[[ $(tmux show-options -v status) = 'on' ]]" "set status off" "set status on"

is_curses_like='(( #{alternate_on} )) || echo "#{pane_current_command}" | egrep -iqe "(less|man|vim)"'
bind -n C-u if "$is_curses_like" "send-keys C-u" "copy-mode -eu"
# bind -n Pageup if "$is_curses_like" "send-keys C-u" "copy-mode -eu"

###############################################################################
# Status Bar
###############################################################################
# status bar format
set -g status-position top
set -g status-style fg=yellow,bg=colour235

# window format
win_fmt=' #{?window_zoomed_flag,[ZOOM] ,}#{?pane_in_mode,[COPY] ,}#I:#W #{?#(echo #{pane_current_command} | egrep "mosh|ssh"),#(ip-for-ssh-or-mosh #{pane_current_command} #{pane_pid}),#T} '
setw -g window-status-format "$win_fmt"
setw -g window-status-current-format "$win_fmt"
setw -g window-status-style fg=colour12,bg=default
setw -g window-status-current-style fg=colour11,bg=colour236

# pane border
set -g pane-border-style fg=colour235
set -g pane-active-border-style fg=colour240,bg=default

# message text
set -g message-style bg=colour235,fg=yellow

set -g status-interval 1
set -g status-justify left # left align window list
set -g status-left-length 20
set -g status-right-length 140
set -g status-left-style "bg=magenta,fg=#ffffff"
set -g status-right '#[fg=blue]#S  #[fg=magenta,bg=default]#(time-since-boot)  #[fg=colour15]#(date -u "+%%a %%b %%d %%H:%%M UTC")#[default]  #{?$SSH_CONNECTION,#[fg=green]#H#[default],local}'

###############################################################################
# Version Specific
###############################################################################
if "tmux -V | awk '{exit !($2 <= 2.0)}'" "source-file $DOTFILES/tmux/2.0.tmux.conf"
if "tmux -V | awk '{exit !($2 == 2.1)}'" "source-file $DOTFILES/tmux/2.1.tmux.conf"
if "tmux -V | awk '{exit !($2 >= 2.2)}'" "source-file $DOTFILES/tmux/2.2+.tmux.conf"
if "tmux -V | awk '{exit !($2 <= 2.3)}'" "source-file $DOTFILES/tmux/2.3-.tmux.conf"
if "tmux -V | awk '{exit !($2 >= 2.5)}'" "source-file $DOTFILES/tmux/2.5.tmux.conf"
