[url "git@github.com:"]
    insteadOf = https://github.com/
[color]
    ui = always
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green
[color "status"]
    added = green
    changed = yellow
    untracked = red
[alias]
    # add
    a = add
    chunkyadd = add --patch

    # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot

    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed  = "!git ls-files -v | grep ^h | cut -c 3-"

    testpush = "!git add -A :/ && git commit --allow-empty -m \"test push at $(date)\" && git push --force"

    syncignore = "!git rm --cached `git ls-files -i --exclude-from=.gitignore`"

    # branch
    b = branch --sort=-committerdate -v

    # commit
    wip = commit -am "WIP"
    c = commit
    cm = commit -m
    cma = commit -am
    ci = commit
    amend = commit --amend
    ammend = commit --amend
    empty = "!empty() { \
        if [[ -n \"$1\" ]]; then \
            git commit --allow-empty -m \"$1\"; \
        else \
            git commit --allow-empty; \
        fi; }; empty"
    oops = "!oops(){ \
        if [[ $(git status --porcelain | wc -l | tr -d '[[:space:]]') == 0 ]]; then \
            echo 'No changes! Aborting.'; \
            return; \
        fi; \
        git commit --amend --no-edit --reset-author; }; \
        oops"
    lol = "!lol(){ \
        if [[ $(git status --porcelain | wc -l | tr -d '[[:space:]]') == 0 ]]; then \
            echo 'No changes! Aborting.'; \
            return; \
        fi; \
        git add -u && git commit --amend --no-edit --reset-author; }; \
        lol"

    # checkout
    co = checkout
    fco = !fzf-git-checkout
    nb = checkout -b
    top = checkout --ours
    bottom = checkout --theirs
    nf = "!nf(){ git checkout master && git pull --rebase && git checkout -b $@; }; nf" # new feature

    top-all = "!top_all(){ \
        for f in $(git diff --name-status --diff-filter U | awk '{print $2}'); do \
          git top \"$f\"; \
        done; \
        git add -u; \
    }; top_all"

    # cherry-pick
    cp = cherry-pick

    # diff
    d = diff
    ds = diff --staged
    last = diff HEAD^

    # log
    l = log --graph --date=short
    ls = "!ls(){ git log --date=short -n ${2:-10} $1; }; ls"
    l1 = log -n 1 --format=fuller
    ls1 = log -n 1 --format=fuller
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    simple = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

    # tags
    tagcommit = !sh -c 'git rev-list $0 | head -n 1'

    # pull
    pl = pull

    # push
    ps = push
    sync = "!git push -u ${1:-origin} HEAD"
    fsync = "!git push -fu ${1:-origin} HEAD"
    track = branch --track
    upstream = branch --track
    shove = push -f # use with caution

    # rebase
    rbC = rebase --continue
    rbS = rebase --skip
    rbA = rebase --abort

    # remote
    r = remote -v

    # reset
    cleanuntracked = "!(cd $(git rev-parse --show-toplevel) && git ls-files --other --exclude-standard | xargs rm -rf %)"
    unstage = reset HEAD
    uncommit = reset --soft HEAD^
    filelog = log -u
    mt = mergetool

    # stash
    ss = stash
    sl = stash list
    sa = stash apply
    sd = stash drop
    stashf = "!f() { [ -f $HOME/dotfiles/bin/git_stash_fzf ] && zsh $HOME/dotfiles/bin/git_stash_fzf || echo 'FZF stash script not found!'; }; f"

    # status
    s = status
    st = status
    stat = status

    # tag
    t = tag -n

    # arc
    arc-clean = "!for b in $(git branch --color=never | egrep -e '^\\s+arcpatch'); do \
        git branch -D \"${b}\"; \
        done"

    # rebase onto a fresh master
    freshen = "!BRANCH=`git rev-parse --abbrev-ref HEAD`; \
        git checkout master && \
        git pull --rebase ${1:-origin} master && \
        git checkout $BRANCH && \
        git rebase master"

    # replace branch with upstream (CAUTION)
    clobber = "!BRANCH=$(git rev-parse --abbrev-ref HEAD); \
        git fetch ${1:-origin} $BRANCH; \
        git checkout FETCH_HEAD || exit; \
        git branch -D $BRANCH; \
        git checkout -b $BRANCH; \
        git branch --set-upstream-to=${1:-origin}/$BRANCH $BRANCH"

    # hub
    pr = "!hubpr() { \
        if ! git rev-parse '@{u}' >/dev/null 2>&1; then \
          git push -u ${1:-origin} $(git rev-parse --abbrev-ref HEAD); \
        fi; \
        [[ $? -eq 0 ]] && hub -c core.commentchar='%' pull-request; }; \
        hubpr"

    # showpr = "!hub_showpr() { \
    #       :; \
    #     }; hub_showpr"

    ctags = "!.git/hooks/ctags"

    # nice: http://stackoverflow.com/a/5201642
    splat = "!splat() { \
        git reset --soft \"${1}^\" && \
        git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; }; \
        splat"

    deprecate = "!git branch -m depr_$(git rev-parse --abbrev-ref HEAD)"

    prune-merged = "!prune_merged() { \
        REMOTE=${1:-origin}; \
        git remote update $REMOTE; \
        PRUNED=$(git remote prune $REMOTE | tee /dev/tty | tail -n +3 | awk '{print $NF}'); \
        for b in $PRUNED; do \
            LOCAL_BRANCH=${b#${REMOTE}/}; \
            if $(git rev-parse --verify $LOCAL_BRANCH >/dev/null 2>&1); then \
                read -p \"Remove local branch '${LOCAL_BRANCH}'? [Y/n] \" yn; \
                case $yn in \
                    [Nn]* ) echo 'skipping' ;; \
                    * ) git branch -D $LOCAL_BRANCH ;; \
                esac; \
            fi; \
        done; }; \
        prune_merged"

    fetch-pr = "!fetch_pr() { \
        git fetch origin \"pull/${1}/head:PR-${1}\" && \
        git checkout \"PR-${1}\"; }; \
        fetch_pr"

    hub = "!hub() { \
        if [[ $1 != 'http*' ]] && [[ $1 != 'git@*' ]]; then \
            git clone git@github.com:${1}.git; \
        else \
            git clone $1; \
        fi; }; \
        hub"

    change-base = "!change_base() { \
            set -e; \
            if [[ $# -ne 2 ]]; then \
              echo 'Usage: git change-base <new base> <cherrypick refs>' >&2; \
              echo 'Example: git change-base master abc123..def456' >&2; \
              exit 1; \
            fi; \
            local new_base=\"$1\"; \
            local cherrypick=\"$2\"; \
            local curr_ref=$(git rev-parse --abbrev-ref HEAD); \
            local backup_ref=\"backup_${curr_ref}\"; \
            git branch -m \"$backup_ref\"; \
            git checkout \"$new_base\"; \
            git checkout -b \"$curr_ref\"; \
            git cherry-pick \"$cherrypick\"; \
        }; \
        change_base"

    # list all files that have been "git add"-ed
    list-added = "!list_added() { git status --porcelain | awk 'match($1, \"M\") { print $2 }'; }; list_added"


[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
	prompt = false
[mergetool "mvimdiff"]
    cmd="vim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
    keepbackup=false
[merge]
    summary = true
    verbosity = 1
[apply]
    whitespace = nowarn
[pull]
    rebase = true
[push]
    # 'git push' will push the current branch to its tracking branch
    # the usual default is to push all branches
    default = upstream
[core]
    # http://stackoverflow.com/questions/18257622/why-is-git-core-preloadindex-default-value-false
    preloadindex = true
    autocrlf = false
    excludesfile = ~/.gitignore_global
    editor = git-commit-editor
    #pager = delta --dark
[interactive]
    diffFilter = delta --color-only
[advice]
    statusHints = false
[diff]
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true
    algorithm = histogram
[column]
    ui = auto
[rerere]
    # Remember my merges
    # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
    enabled = true
[init]
    templatedir = ~/.git_template
	defaultBranch = main
[include]
    path = .gitconfig.user
    path = .gitconfig.os
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[user]
	name = Mighty Automation
	email = aykamko@gmail.com
	name = Aleks
