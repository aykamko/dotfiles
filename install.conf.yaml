- clean:
  - '~'
  - '~/.*'

- shell:
  - description: Update submodules in dotfiles repo
    command: |
      cd $HOME/dotfiles
      git submodule update --init --recursive

# ----- zsh -----
- clean: ['~/.zprezto/modules/prompt/functions']

# zsh is the default shell starting with macOS Catalina
#
# - shell++:
#   - description: Install zsh
#     condition: '! hash zsh'
#   - stdall: true
#     platforms:
#       linux: sudo apt-get install -y zsh
#       darwin: brew install zsh
#
# - shell++:
#   - description: Set zsh as default shell
#     condition: '! echo $SHELL | grep -q zsh'
#   - stdall: true
#     command: sudo chsh -s $(which zsh) $(whoami)

- shell++:
  - description: Install zprezto
    condition: '[ ! -d "${ZDOTFIR:-$HOME}/.zprezto" ]'
  - command: |
      git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
      for rcfile in $(find "${ZDOTDIR:-$HOME}"/.zprezto/runcoms -not -path '*\.md' -type f); do
          ln -sf "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile##*/}"
      done
      cd "${ZDOTFIR:-$HOME}/.zprezto"
      git submodule update --init --recursive
  - platforms:
      darwin: sudo rm -f /etc/zshenv && sudo ln -s $HOME/dotfiles/zsh/etc/zshenv.os.darwin /etc/zshenv

- platform-link:
    darwin:
      ~/.zshrc.os: zsh/zshrc.os.darwin

- link:
    ~/.zshenv:
        path: zsh/zshenv
        relink: true
    ~/.zshrc:
        path: zsh/zshrc
        relink: true
    ~/.zprofile:
        path: zsh/zprofile
        relink: true
    ~/.zpreztorc:
        path: zsh/zpreztorc
        relink: true
    ~/.zlogin:
        path: zsh/zlogin
        relink: true

# ----- vim -----
- clean:
  - '~/.vim'
  - '~/.vim/colors'

- link:
    ~/.vimrc: vim/vimrc
    ~/.vim/vimrc_small:
      path: vim/vimrc_small
      create: true
    ~/.vim/snippets:
      path: vim/vim/snippets
      create: true
    ~/.vim/colors/hybrid_ayk.vim:
      path: vim/vim/colors/hybrid_ayk.vim
      create: true
    ~/.vim/autoload/test:
      path: vim/vim/autoload/test
      create: true

- shell++:
  - description: Install Neovim
    condition: '! hash nvim'
  - prompt: Install Neovim? (May require building from source)
    default: true
  - stdall: true
    platforms:
      linux:
        - condition: '! hash apt-get 2>/dev/null || test -h $(which apt-get)'
          branch:
            0:
              - prompt: Neovim has to build from source! Continue anyway?
                default: True
              - stdall: True
                command: |
                  sudo yum -y install \
                      libtool autoconf automake \
                      cmake gcc gcc-c++ \
                      make pkgconfig unzip \
                      xclip python34 python34-devel \
                      python34-pip
                  git clone https://github.com/neovim/neovim ~/neovim
                  pushd ~/neovim
                  make
                  sudo make install
                  popd

              - prompt: Delete Neovim folder at ~/neovim?
                default: True
              - command: rm -rf ~/neovim

            1:
              - stdall: true
                command: |
                  sudo apt-get install -y software-properties-common
                  sudo add-apt-repository -y ppa:neovim-ppa/unstable
                  sudo apt-get update
                  sudo apt-get install -y neovim
                  sudo apt-get install -y python-dev python-pip python3-dev python3-pip xclip

        - stdall: true
          command: |
            sudo update-alternatives --install /usr/bin/vi vi /usr/bin/nvim 60
            sudo update-alternatives --install /usr/bin/vim vim /usr/bin/nvim 60
            sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 60
            sudo update-alternatives --auto vi
            sudo update-alternatives --auto vim
            sudo update-alternatives --auto editor

            sudo pip install neovim
            if hash pip3 2>/dev/null; then
                sudo pip3 install neovim neovim-remote
            fi
            if hash pip-3.4 2>/dev/null; then
                sudo pip-3.4 install neovim neovim-remote
            fi

- shell++:
  - description: Link neovim to vim
    command: |
      mkdir -p ${XDG_CONFIG_HOME:=$HOME/.config}
      ln -sf ~/.vim $XDG_CONFIG_HOME/nvim
      ln -sf ~/.vimrc $XDG_CONFIG_HOME/nvim/init.vim


# ----- git -----
- link:
    ~/.gitconfig:
      path: git/gitconfig
      relink: true
    ~/.gitconfig.user: git/gitconfig.user
    ~/.gitignore_global: git/gitignore_global
    ~/.git_template: git/git_template

- platform-link:
    linux:
      ~/.gitconfig.os: git/gitconfig.os.linux
    darwin:
      ~/.gitconfig.os: git/gitconfig.os.darwin

# ----- tmux -----
- link:
    ~/.tmux.conf: tmux/tmux.conf

- shell++:
  - description: Build tmux 2.2 from source
    condition: "! hash tmux 2>/dev/null || ! tmux -V | awk '{exit $2 < 2.2}'"
  - prompt: Download and build tmux v2.2? (May require additional packages)
    default: true
  - stdall: true
    platforms:
      darwin: echo 'TODO'
      linux: sudo apt-get install -y automake pkg-config libevent-dev ncurses-dev
  - stdall: true
    command: |
      TMUX_GITREF=9a4b45d
      curl -L "https://api.github.com/repos/tmux/tmux/tarball/$TMUX_GITREF" > /tmp/tmux-2.2.tar.gz
      cd /tmp
      tar -zxvf tmux-2.2.tar.gz
      cd "tmux-tmux-$TMUX_GITREF"
      sh autogen.sh
      ./configure
      make
      sudo make install
      cd ..
      rm -rf tmux-2.2.tar.gz "tmux-tmux-$TMUX_GITREF"

# ----- virtualenv -----
- clean: ['~/.pyvirtualenvs']
- link:
    ~/.pyvirtualenvs/postactivate:
      path: virtualenv/postactivate
      relink: true
      create: true
    ~/.pyvirtualenvs/postdeactivate:
      path: virtualenv/postdeactivate
      relink: true
      create: true

# ----- pry -----
- link:
    ~/.pryrc:
      path: pryrc
      relink: true

# ----- direnv -----
- link:
    ~/.config/direnv/direnvrc:
      path: direnv/direnvrc
      create: true

# ----- alacritty -----
# doesn't work, need to download manually
#- shell:
#  - description: Install SauceCodePro Font
#    command: |
#      filename="Sauce Code Pro Nerd Font Complete.ttf"
#      curl -LO "https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/SourceCodePro/Regular/complete/Sauce%20Code%20Pro%20Nerd%20Font%20Complete.ttf?raw=true" > /tmp/"$filename"
#      cp /tmp/"$filename" ~/Library/Fonts
- link:
    ~/.config/alacritty/alacritty.yml:
      path: alacritty/alacritty.yml
      create: true
